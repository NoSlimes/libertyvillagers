//file:noinspection UnnecessaryQualifiedReference
//file:noinspection GroovyMissingReturnStatement
plugins {
	id 'fabric-loom' version '1.0-SNAPSHOT'
	id 'maven-publish'
	id "com.modrinth.minotaur" version "2.+"
	id "com.github.breadmoirai.github-release" version "2.4.1"
	id 'org.ajoberstar.grgit' version '4.1.1'
	id 'com.matthewprenger.cursegradle' version '1.4.0'
	id 'se.bjurr.gitchangelog.git-changelog-gradle-plugin' version '2.1.2'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

// Adds a few utility methods like getProjectProperty
apply from: 'https://raw.githubusercontent.com/NerdHubMC/Gradle-Scripts/master/scripts/utilities.gradle'
apply from: 'https://raw.githubusercontent.com/NerdHubMC/Gradle-Scripts/master/scripts/fabric/publish/changelog.gradle'

archivesBaseName = project.archives_base_name
version = "${project.mod_version}+fabric+${project.minecraft_version}"
group = project.maven_group

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven {
		// For ModConfig.
		url "https://maven.shedaniel.me/"
	}

	// For ModMenu.
	maven {
		url "https://maven.terraformersmc.com/releases/"
	}

	// For server-translations.
	maven {
		url "https://maven.nucleoid.xyz"
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// ModConfig.
	modApi include("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	// ModMenu.
	modImplementation("com.terraformersmc:modmenu:${project.mod_menu_version}") {
		exclude module: 'fabric-api' // includes bad Fabric API
	}

	// Server-Translations.
	modImplementation include("xyz.nucleoid:server-translations-api:${project.min_server_translations_version}")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
	it.options.encoding = "UTF-8"
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		maven {
			name = "GitHubPackages"
			url = "https://maven.pkg.github.com/gitsh01/libertyvillagers"
			credentials {
				username = 'gitsh01'
				password = System.getenv("GITHUB_TOKEN")
			}
		}
	}
}

githubRelease {
	token System.getenv("GITHUB_TOKEN") ?: ""
	owner "gitsh01"
	tagName = project.version
	targetCommitish = { grgit.branch.current().name }
	generateReleaseNotes true // Generate release notes automatically, if true and body is present, body will be
	// prepended, if name is not given, one will be generated by the tag
	draft true // by default this is true
	prerelease false // by default this is false
	FilenameFilter filter = { dir, filename -> filename.contains(project.version) && !filename.contains('-dev.jar') }
	releaseAssets = { jar.destinationDirectory.asFile.get().listFiles filter }
}

import com.modrinth.minotaur.dependencies.ModDependency

modrinth {
	token = System.getenv("GITHUB_TOKEN")
	// Please use an environment variable for this! The default is `$MODRINTH_TOKEN`.
	projectId = '264clomZ' // The ID of your Modrinth project. Slugs will not work.
	versionType = 'release'
	uploadFile = remapJar // Tells Minotaur to use the remapped jar
	gameVersions = [ project.minecraft_version ] // An array of game versions the version supports
	loaders = ['fabric'] // Self-explanatory.
	changelog = file('changelog.md').text
	dependencies = [
			new ModDependency('P7dR8mSH', 'required') // Creates a new required dependency on Fabric API
	]
	syncBodyFrom = rootProject.file("README.md").text
}
tasks.modrinth.dependsOn(tasks.modrinthSyncBody)

curseforge {
	if (project.getProjectProperty('curse_key') != null) {
		apiKey = System.getenv("CURSE_KEY")
	}

	if (project.hasProperty('curseforge_id')) {
		project {
			id = findProperty('curseforge_id')

			releaseType = project.release_type

			//usually automatically determined by the CurseGradle plugin, but won't work with fabric
			"${project.curseforge_versions}".split('; ').each {
				addGameVersion it
			}
			addGameVersion 'Fabric'

			mainArtifact(remapJar) {
				displayName = "${project.name}-${project.version}.jar"

				if (project.hasProperty('cf_requirements') || project.hasProperty('cf_optionals') || project.hasProperty('cf_embeddeds') || project.hasProperty('cf_tools') || project.hasProperty('cf_incompatibles') || project.hasProperty('cf_includes')) {
					relations {
						if (project.hasProperty('cf_requirements')) {
							"${project.cf_requirements}".split('; ').each {
								requiredDependency "${it}"
							}
						}
						if (project.hasProperty('cf_optionals')) {
							"${project.cf_optionals}".split('; ').each {
								optionalDependency "${it}"
							}
						}
						if (project.hasProperty('cf_embeddeds')) {
							"${project.cf_embeddeds}".split('; ').each {
								embeddedLibrary "${it}"
							}
						}
						if (project.hasProperty('cf_tools')) {
							"${project.cf_tools}".split('; ').each {
								tool "${it}"
							}
						}
						if (project.hasProperty('cf_incompatibles')) {
							"${project.cf_incompatibles}".split('; ').each {
								incompatible "${it}"
							}
						}
						if (project.hasProperty('cf_includes')) {
							"${project.cf_includes}".split('; ').each {
								include "${it}"
							}
						}

					}
				}
			}

			changelogType = 'markdown'
			changelog = file('changelog.md')

			afterEvaluate {
				uploadTask.dependsOn remapSourcesJar
			}
		}
		options {
			forgeGradleIntegration = false
		}
	}
}

task gitChangelogTask(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
	file = file("changelog.md")
	fromRepo = file(".")
	prependToFile = true
	fromRef = "1.0.9+fabric+${project.minecraft_version}"
	toRef = "${project.mod_version}+fabric+${project.minecraft_version}"
	templateContent = """
{{#tags}}
{{#ifEquals name "Unreleased"}}
{{else}}

## [{{name}}](https://gitlab.com/html-validate/html-validate/compare/{{name}}) ({{tagDate .}})

  {{#ifContainsType commits type='feat'}}
### Features

    {{#commits}}
      {{#ifCommitType . type='feat'}}
 - {{#eachCommitScope .}} **{{.}}** {{/eachCommitScope}} {{{commitDescription .}}} ([{{hash}}](https://gitlab.com/html-validate/html-validate/commit/{{hashFull}}))
      {{/ifCommitType}}
    {{/commits}}
  {{/ifContainsType}}

  {{#ifContainsType commits type='fix'}}
### Bug Fixes

    {{#commits}}
      {{#ifCommitType . type='fix'}}
 - {{#eachCommitScope .}} **{{.}}** {{/eachCommitScope}} {{{commitDescription .}}} ([{{hash}}](https://gitlab.com/html-validate/html-validate/commit/{{hashFull}}))
      {{/ifCommitType}}
    {{/commits}}
  {{/ifContainsType}}

{{/ifEquals}}
{{/tags}}
 """
}

task release(dependsOn: [tasks.githubRelease, tasks.curseforge, tasks.modrinth]) {
	group = 'publishing'
	description = 'Releases a new version to Github, Modrinth, and Curseforge'
}